/*
Copyright The Aaron Project.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "dguest-scheduler/pkg/apis/scheduler/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FoodLister helps list Foods.
// All objects returned here must be treated as read-only.
type FoodLister interface {
	// List lists all Foods in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Food, err error)
	// Foods returns an object that can list and get Foods.
	Foods(namespace string) FoodNamespaceLister
	FoodListerExpansion
}

// foodLister implements the FoodLister interface.
type foodLister struct {
	indexer cache.Indexer
}

// NewFoodLister returns a new FoodLister.
func NewFoodLister(indexer cache.Indexer) FoodLister {
	return &foodLister{indexer: indexer}
}

// List lists all Foods in the indexer.
func (s *foodLister) List(selector labels.Selector) (ret []*v1alpha1.Food, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Food))
	})
	return ret, err
}

// Foods returns an object that can list and get Foods.
func (s *foodLister) Foods(namespace string) FoodNamespaceLister {
	return foodNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FoodNamespaceLister helps list and get Foods.
// All objects returned here must be treated as read-only.
type FoodNamespaceLister interface {
	// List lists all Foods in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Food, err error)
	// Get retrieves the Food from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Food, error)
	FoodNamespaceListerExpansion
}

// foodNamespaceLister implements the FoodNamespaceLister
// interface.
type foodNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Foods in the indexer for a given namespace.
func (s foodNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Food, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Food))
	})
	return ret, err
}

// Get retrieves the Food from the indexer for a given namespace and name.
func (s foodNamespaceLister) Get(name string) (*v1alpha1.Food, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("food"), name)
	}
	return obj.(*v1alpha1.Food), nil
}
