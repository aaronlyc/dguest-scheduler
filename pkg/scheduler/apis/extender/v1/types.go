package v1

import (
	"dguest-scheduler/pkg/apis/scheduler/v1alpha1"
	"k8s.io/apimachinery/pkg/types"
)

const (
	// MinExtenderPriority defines the min priority value for extender.
	MinExtenderPriority int64 = 0

	// MaxExtenderPriority defines the max priority value for extender.
	MaxExtenderPriority int64 = 10
)

// ExtenderPreemptionResult represents the result returned by preemption phase of extender.
type ExtenderPreemptionResult struct {
	FoodNameToMetaVictims map[string]*MetaVictims
}

// ExtenderPreemptionArgs represents the arguments needed by the extender to preempt dguests on foods.
type ExtenderPreemptionArgs struct {
	// Dguest being scheduled
	Dguest *v1alpha1.Dguest
	// Victims map generated by scheduler preemption phase
	// Only set FoodNameToMetaVictims if Extender.FoodCacheCapable == true. Otherwise, only set FoodNameToVictims.
	FoodNameToVictims     map[string]*Victims
	FoodNameToMetaVictims map[string]*MetaVictims
}

// Victims represents:
//
//	dguests:  a group of dguests expected to be preempted.
//	numPDBViolations: the count of violations of DguestDisruptionBudget
type Victims struct {
	Dguests          []*v1alpha1.Dguest
	NumPDBViolations int64
}

// MetaDguest represent identifier for a v1.Dguest
type MetaDguest struct {
	UID string
}

// MetaVictims represents:
//
//	dguests:  a group of dguests expected to be preempted.
//	  Only Dguest identifiers will be sent and user are expect to get v1.Dguest in their own way.
//	numPDBViolations: the count of violations of DguestDisruptionBudget
type MetaVictims struct {
	Dguests          []*MetaDguest
	NumPDBViolations int64
}

// ExtenderArgs represents the arguments needed by the extender to filter/prioritize
// foods for a dguest.
type ExtenderArgs struct {
	// Dguest being scheduled
	Dguest *v1alpha1.Dguest
	// List of candidate foods where the dguest can be scheduled; to be populated
	// only if Extender.FoodCacheCapable == false
	Foods *v1alpha1.FoodList
	// List of candidate food names where the dguest can be scheduled; to be
	// populated only if Extender.FoodCacheCapable == true
	FoodNames *[]string
}

// FailedFoodsMap represents the filtered out foods, with food names and failure messages
type FailedFoodsMap map[string]string

// ExtenderFilterResult represents the results of a filter call to an extender
type ExtenderFilterResult struct {
	// Filtered set of foods where the dguest can be scheduled; to be populated
	// only if Extender.FoodCacheCapable == false
	Foods *v1alpha1.FoodList
	// Filtered set of foods where the dguest can be scheduled; to be populated
	// only if Extender.FoodCacheCapable == true
	FoodNames *[]string
	// Filtered out foods where the dguest can't be scheduled and the failure messages
	FailedFoods FailedFoodsMap
	// Filtered out foods where the dguest can't be scheduled and preemption would
	// not change anything. The value is the failure message same as FailedFoods.
	// Foods specified here takes precedence over FailedFoods.
	FailedAndUnresolvableFoods FailedFoodsMap
	// Error message indicating failure
	Error string
}

// ExtenderBindingArgs represents the arguments to an extender for binding a dguest to a food.
type ExtenderBindingArgs struct {
	// DguestName is the name of the dguest being bound
	DguestName string
	// DguestNamespace is the namespace of the dguest being bound
	DguestNamespace string
	// DguestUID is the UID of the dguest being bound
	DguestUID types.UID
	// Food selected by the scheduler
	Food string
}

// ExtenderBindingResult represents the result of binding of a dguest to a food from an extender.
type ExtenderBindingResult struct {
	// Error message indicating failure
	Error string
}

// HostPriority represents the priority of scheduling to a particular host, higher priority is better.
type HostPriority struct {
	// Name of the host
	Host string
	// Score associated with the host
	Score int64
}

// HostPriorityList declares a []HostPriority type.
type HostPriorityList []HostPriority
